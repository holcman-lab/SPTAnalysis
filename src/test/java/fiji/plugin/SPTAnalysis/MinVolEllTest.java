package fiji.plugin.SPTAnalysis;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Test;

import fiji.plugin.SPTAnalysis.struct.Ellipse;
import fiji.plugin.SPTAnalysis.struct.Point;

public class MinVolEllTest
{
	@Test
	public void test() 
	{
		ArrayList<Point> pts = new ArrayList<> ();
		pts.add(new Point(0.0, 0.503781, 0.406727));
		pts.add(new Point(0.0, 0.489594, 0.666932));
		pts.add(new Point(0.0, 0.877049, 0.933726));
		pts.add(new Point(0.0, 0.353142, 0.81095));
		pts.add(new Point(0.0, 0.449444, 0.484548));
		pts.add(new Point(0.0, 0.96353, 0.756749));
		pts.add(new Point(0.0, 0.0422978, 0.417047));
		pts.add(new Point(0.0, 0.972958, 0.971786));
		pts.add(new Point(0.0, 0.189207, 0.987975));
		pts.add(new Point(0.0, 0.66712, 0.864148));
		pts.add(new Point(0.0, 0.58644, 0.388884));
		pts.add(new Point(0.0, 0.675112, 0.454742));
		pts.add(new Point(0.0, 0.361022, 0.246687));
		pts.add(new Point(0.0, 0.620278, 0.784423));
		pts.add(new Point(0.0, 0.811151, 0.882838));
		pts.add(new Point(0.0, 0.0192575, 0.913712));
		pts.add(new Point(0.0, 0.0838735, 0.558285));
		pts.add(new Point(0.0, 0.974802, 0.598868));
		pts.add(new Point(0.0, 0.65135, 0.148877));
		pts.add(new Point(0.0, 0.231238, 0.899713));
		pts.add(new Point(0.0, 0.403491, 0.450394));
		pts.add(new Point(0.0, 0.122021, 0.205672));
		pts.add(new Point(0.0, 0.268439, 0.899651));
		pts.add(new Point(0.0, 0.257846, 0.762586));
		pts.add(new Point(0.0, 0.331665, 0.882486));
		pts.add(new Point(0.0, 0.152234, 0.28495));
		pts.add(new Point(0.0, 0.348008, 0.673226));
		pts.add(new Point(0.0, 0.121658, 0.66428));
		pts.add(new Point(0.0, 0.884153, 0.122815));
		pts.add(new Point(0.0, 0.0942784, 0.407318));
		pts.add(new Point(0.0, 0.930041, 0.275287));
		pts.add(new Point(0.0, 0.39902, 0.71667));
		pts.add(new Point(0.0, 0.0474015, 0.283384));
		pts.add(new Point(0.0, 0.342374, 0.896199));
		pts.add(new Point(0.0, 0.735966, 0.826579));
		pts.add(new Point(0.0, 0.794682, 0.390027));
		pts.add(new Point(0.0, 0.544906, 0.497903));
		pts.add(new Point(0.0, 0.686223, 0.694805));
		pts.add(new Point(0.0, 0.893633, 0.834369));
		pts.add(new Point(0.0, 0.0547918, 0.60963));
		pts.add(new Point(0.0, 0.303661, 0.574737));
		pts.add(new Point(0.0, 0.0461916, 0.326042));
		pts.add(new Point(0.0, 0.195477, 0.456425));
		pts.add(new Point(0.0, 0.720166, 0.713796));
		pts.add(new Point(0.0, 0.721753, 0.884405));
		pts.add(new Point(0.0, 0.877799, 0.720856));
		pts.add(new Point(0.0, 0.582433, 0.0186128));
		pts.add(new Point(0.0, 0.0706843, 0.674776));
		pts.add(new Point(0.0, 0.922745, 0.438509));
		pts.add(new Point(0.0, 0.800372, 0.43782));
		pts.add(new Point(0.0, 0.285947, 0.117037));
		pts.add(new Point(0.0, 0.543663, 0.814682));
		pts.add(new Point(0.0, 0.984776, 0.324855));
		pts.add(new Point(0.0, 0.715678, 0.246228));
		pts.add(new Point(0.0, 0.83897, 0.342713));
		pts.add(new Point(0.0, 0.433261, 0.375692));
		pts.add(new Point(0.0, 0.470625, 0.546554));
		pts.add(new Point(0.0, 0.560713, 0.56192));
		pts.add(new Point(0.0, 0.269092, 0.395822));
		pts.add(new Point(0.0, 0.749018, 0.398131));
		pts.add(new Point(0.0, 0.503888, 0.515367));
		pts.add(new Point(0.0, 0.64681, 0.657531));
		pts.add(new Point(0.0, 0.307746, 0.950915));
		pts.add(new Point(0.0, 0.138725, 0.722349));
		pts.add(new Point(0.0, 0.475573, 0.40008));
		pts.add(new Point(0.0, 0.362459, 0.831871));
		pts.add(new Point(0.0, 0.788113, 0.134338));
		pts.add(new Point(0.0, 0.780296, 0.0604668));
		pts.add(new Point(0.0, 0.668512, 0.0842471));
		pts.add(new Point(0.0, 0.133504, 0.163898));
		pts.add(new Point(0.0, 0.0215559, 0.32422));
		pts.add(new Point(0.0, 0.559841, 0.301727));
		pts.add(new Point(0.0, 0.300819, 0.011681));
		pts.add(new Point(0.0, 0.93941, 0.539905));
		pts.add(new Point(0.0, 0.980904, 0.0953727));
		pts.add(new Point(0.0, 0.28662, 0.146515));
		pts.add(new Point(0.0, 0.80082, 0.631141));
		pts.add(new Point(0.0, 0.896111, 0.85932));
		pts.add(new Point(0.0, 0.597527, 0.974222));
		pts.add(new Point(0.0, 0.884017, 0.570838));
		pts.add(new Point(0.0, 0.943732, 0.99685));
		pts.add(new Point(0.0, 0.549158, 0.553542));
		pts.add(new Point(0.0, 0.728387, 0.515458));
		pts.add(new Point(0.0, 0.576758, 0.330682));
		pts.add(new Point(0.0, 0.0258575, 0.430002));
		pts.add(new Point(0.0, 0.446531, 0.491806));
		pts.add(new Point(0.0, 0.646302, 0.0710371));
		pts.add(new Point(0.0, 0.521203, 0.887739));
		pts.add(new Point(0.0, 0.372313, 0.0646336));
		pts.add(new Point(0.0, 0.937135, 0.436185));
		pts.add(new Point(0.0, 0.829533, 0.82663));
		pts.add(new Point(0.0, 0.849085, 0.394535));
		pts.add(new Point(0.0, 0.372534, 0.613475));
		pts.add(new Point(0.0, 0.593185, 0.818641));
		pts.add(new Point(0.0, 0.872553, 0.886235));
		pts.add(new Point(0.0, 0.933502, 0.931112));
		pts.add(new Point(0.0, 0.668464, 0.190785));
		pts.add(new Point(0.0, 0.206776, 0.258582));
		pts.add(new Point(0.0, 0.653851, 0.897866));
		pts.add(new Point(0.0, 0.0720516, 0.593362));

		Ellipse e = Utils.minVolEllipse(pts, 0.001);

		assertEquals(0.545, e.mu()[0], 1e-3);
		assertEquals(0.563, e.mu()[1], 1e-3);
		assertEquals(0.640, e.rad()[0], 1e-3);
		assertEquals(0.590, e.rad()[1], 1e-3);
		assertEquals(2.162, Math.abs(e.phi()), 1e-3);
	}

	@Test
	public void test2() 
	{
		ArrayList<Point> pts = new ArrayList<> ();
		pts.add(new Point(0.0, 0.838256, 1.61798));
		pts.add(new Point(0.0, 0.584719, 0.713018));
		pts.add(new Point(0.0, 0.948109, 0.146487));
		pts.add(new Point(0.0, 0.0610289, 1.18198));
		pts.add(new Point(0.0, 0.584641, 1.82038));
		pts.add(new Point(0.0, 0.285108, 0.387532));
		pts.add(new Point(0.0, 0.827732, 0.864736));
		pts.add(new Point(0.0, 0.190986, 1.49832));
		pts.add(new Point(0.0, 0.44253, 0.078369));
		pts.add(new Point(0.0, 0.393412, 1.89265));
		pts.add(new Point(0.0, 0.826574, 1.52735));
		pts.add(new Point(0.0, 0.676871, 1.11764));
		pts.add(new Point(0.0, 0.207603, 0.367686));
		pts.add(new Point(0.0, 0.318105, 0.995898));
		pts.add(new Point(0.0, 0.133811, 1.03569));
		pts.add(new Point(0.0, 0.671463, 1.98849));
		pts.add(new Point(0.0, 0.570991, 1.7097));
		pts.add(new Point(0.0, 0.169767, 1.92481));
		pts.add(new Point(0.0, 0.147656, 1.35788));
		pts.add(new Point(0.0, 0.47608, 0.807003));
		pts.add(new Point(0.0, 0.908102, 1.86996));
		pts.add(new Point(0.0, 0.552175, 0.958969));
		pts.add(new Point(0.0, 0.0329399, 0.463583));
		pts.add(new Point(0.0, 0.0538629, 0.79258));
		pts.add(new Point(0.0, 0.805063, 1.41015));
		pts.add(new Point(0.0, 0.451375, 1.11712));
		pts.add(new Point(0.0, 0.382646, 1.51326));
		pts.add(new Point(0.0, 0.789644, 1.99096));
		pts.add(new Point(0.0, 0.364287, 1.92486));
		pts.add(new Point(0.0, 0.53235, 1.07013));
		pts.add(new Point(0.0, 0.711657, 1.92774));
		pts.add(new Point(0.0, 0.871477, 0.231252));
		pts.add(new Point(0.0, 0.32869, 0.102897));
		pts.add(new Point(0.0, 0.650118, 0.608698));
		pts.add(new Point(0.0, 0.974836, 1.16038));
		pts.add(new Point(0.0, 0.0759674, 1.06193));
		pts.add(new Point(0.0, 0.587019, 1.80242));
		pts.add(new Point(0.0, 0.413886, 1.0811));
		pts.add(new Point(0.0, 0.309136, 0.863961));
		pts.add(new Point(0.0, 0.263834, 1.08533));
		pts.add(new Point(0.0, 0.758766, 1.42483));
		pts.add(new Point(0.0, 0.995216, 0.0333494));
		pts.add(new Point(0.0, 0.186571, 1.60184));
		pts.add(new Point(0.0, 0.781145, 0.285019));
		pts.add(new Point(0.0, 0.195798, 0.956949));
		pts.add(new Point(0.0, 0.992359, 0.513671));
		pts.add(new Point(0.0, 0.802262, 0.738183));
		pts.add(new Point(0.0, 0.424227, 1.32353));
		pts.add(new Point(0.0, 0.728864, 0.339218));
		pts.add(new Point(0.0, 0.498354, 0.557568));

		Ellipse e = Utils.minVolEllipse(pts, 0.001);

		assertEquals(0.567, e.mu()[0], 1e-3);
		assertEquals(0.953, e.mu()[1], 1e-3);
		assertEquals(1.182, e.rad()[0], 1e-3);
		assertEquals(0.611, e.rad()[1], 1e-3);
		assertEquals(1.637, Math.abs(e.phi()), 1e-3);
	}

	@Test
	public void test3() 
	{
		ArrayList<Point> pts = new ArrayList<> ();
		pts.add(new Point(0.0, 1.74829, 9.64256));
		pts.add(new Point(0.0, 4.21851, 9.67326));
		pts.add(new Point(0.0, 6.19699, 11.0402));
		pts.add(new Point(0.0, 3.10094, 9.33456));
		pts.add(new Point(0.0, 5.5162, 8.48549));
		pts.add(new Point(0.0, 4.49497, 8.87012));
		pts.add(new Point(0.0, 5.43231, 10.2569));
		pts.add(new Point(0.0, 5.47994, 10.7385));
		pts.add(new Point(0.0, 1.74683, 11.1469));
		pts.add(new Point(0.0, 2.91033, 8.79133));
		pts.add(new Point(0.0, 4.75421, 10.4923));
		pts.add(new Point(0.0, 3.93848, 9.9424));
		pts.add(new Point(0.0, 6.3448, 9.37721));
		pts.add(new Point(0.0, 5.22748, 9.71133));
		pts.add(new Point(0.0, 4.32785, 9.66641));
		pts.add(new Point(0.0, 2.98884, 10.1523));
		pts.add(new Point(0.0, 2.77543, 10.4404));
		pts.add(new Point(0.0, 5.91509, 9.06209));
		pts.add(new Point(0.0, 3.72507, 8.39959));
		pts.add(new Point(0.0, 5.56362, 10.697));
		pts.add(new Point(0.0, 1.98972, 9.33551));
		pts.add(new Point(0.0, 5.78078, 10.539));
		pts.add(new Point(0.0, 1.63759, 8.67963));
		pts.add(new Point(0.0, 5.9778, 8.46121));
		pts.add(new Point(0.0, 5.98168, 10.9441));
		pts.add(new Point(0.0, 4.11005, 10.8542));
		pts.add(new Point(0.0, 2.09859, 11.2394));
		pts.add(new Point(0.0, 2.38541, 10.8165));
		pts.add(new Point(0.0, 5.01642, 8.23506));
		pts.add(new Point(0.0, 5.64017, 9.81941));
		pts.add(new Point(0.0, 1.67347, 11.2326));
		pts.add(new Point(0.0, 5.27404, 9.71435));
		pts.add(new Point(0.0, 6.26642, 10.8454));
		pts.add(new Point(0.0, 3.2075, 8.33909));
		pts.add(new Point(0.0, 4.67845, 11.2011));
		pts.add(new Point(0.0, 3.20817, 10.9989));
		pts.add(new Point(0.0, 2.57803, 9.88049));
		pts.add(new Point(0.0, 5.41528, 9.46616));
		pts.add(new Point(0.0, 5.10099, 9.17408));
		pts.add(new Point(0.0, 2.88862, 10.3687));
		pts.add(new Point(0.0, 4.40051, 8.16261));
		pts.add(new Point(0.0, 3.59661, 9.28707));
		pts.add(new Point(0.0, 1.9585, 10.9988));
		pts.add(new Point(0.0, 1.61966, 9.82502));
		pts.add(new Point(0.0, 3.94591, 9.59853));
		pts.add(new Point(0.0, 2.88577, 9.6692));
		pts.add(new Point(0.0, 3.19199, 9.08399));
		pts.add(new Point(0.0, 2.931, 11.0866));
		pts.add(new Point(0.0, 2.3511, 11.1838));
		pts.add(new Point(0.0, 3.48833, 9.72232));
		pts.add(new Point(0.0, 4.97429, 11.2169));
		pts.add(new Point(0.0, 2.51431, 9.54223));
		pts.add(new Point(0.0, 4.81831, 9.44925));
		pts.add(new Point(0.0, 3.70647, 8.78523));
		pts.add(new Point(0.0, 3.65781, 8.72294));
		pts.add(new Point(0.0, 2.37269, 10.7182));
		pts.add(new Point(0.0, 2.46215, 10.3871));
		pts.add(new Point(0.0, 4.56978, 9.77281));
		pts.add(new Point(0.0, 2.83967, 10.7067));
		pts.add(new Point(0.0, 4.2872, 9.71705));
		pts.add(new Point(0.0, 6.20502, 9.84212));
		pts.add(new Point(0.0, 5.05807, 8.78545));
		pts.add(new Point(0.0, 4.88251, 9.954));
		pts.add(new Point(0.0, 6.27772, 8.56542));
		pts.add(new Point(0.0, 5.36116, 8.28294));
		pts.add(new Point(0.0, 4.52648, 10.2519));
		pts.add(new Point(0.0, 6.22105, 10.0187));
		pts.add(new Point(0.0, 1.79702, 8.80533));
		pts.add(new Point(0.0, 2.83819, 9.38759));
		pts.add(new Point(0.0, 6.41367, 10.0853));
		pts.add(new Point(0.0, 5.34559, 9.85256));
		pts.add(new Point(0.0, 3.86726, 8.51805));
		pts.add(new Point(0.0, 4.89088, 8.6479));
		pts.add(new Point(0.0, 3.57634, 8.12312));
		pts.add(new Point(0.0, 3.39314, 9.42467));
		pts.add(new Point(0.0, 2.56209, 9.64408));
		pts.add(new Point(0.0, 3.40703, 8.61879));
		pts.add(new Point(0.0, 1.64775, 10.2005));
		pts.add(new Point(0.0, 3.85216, 8.17591));
		pts.add(new Point(0.0, 3.1602, 8.49339));
		pts.add(new Point(0.0, 6.35971, 11.0906));
		pts.add(new Point(0.0, 4.26611, 11.1647));
		pts.add(new Point(0.0, 5.71459, 8.21645));
		pts.add(new Point(0.0, 3.53216, 9.66091));
		pts.add(new Point(0.0, 3.80085, 10.8117));
		pts.add(new Point(0.0, 5.61501, 8.87777));
		pts.add(new Point(0.0, 6.43619, 10.7229));
		pts.add(new Point(0.0, 4.10926, 10.6584));
		pts.add(new Point(0.0, 6.10868, 10.0824));
		pts.add(new Point(0.0, 5.18033, 8.12698));
		pts.add(new Point(0.0, 4.3258, 9.30474));
		pts.add(new Point(0.0, 6.32451, 10.9417));
		pts.add(new Point(0.0, 5.60601, 10.2427));
		pts.add(new Point(0.0, 6.27885, 9.30193));
		pts.add(new Point(0.0, 4.7188, 10.0917));
		pts.add(new Point(0.0, 3.39028, 8.879));
		pts.add(new Point(0.0, 3.87334, 9.90281));
		pts.add(new Point(0.0, 6.04121, 11.183));
		pts.add(new Point(0.0, 1.57397, 10.771));
		pts.add(new Point(0.0, 2.28034, 9.00435));
		pts.add(new Point(0.0, 3.84841, 10.2493));
		pts.add(new Point(0.0, 4.2041, 9.23735));
		pts.add(new Point(0.0, 1.79726, 11.1992));
		pts.add(new Point(0.0, 4.77699, 8.38204));
		pts.add(new Point(0.0, 5.93038, 8.90095));
		pts.add(new Point(0.0, 2.04597, 10.6514));
		pts.add(new Point(0.0, 3.68011, 8.3834));
		pts.add(new Point(0.0, 2.89555, 9.77751));
		pts.add(new Point(0.0, 6.40653, 10.6179));
		pts.add(new Point(0.0, 4.53162, 10.4251));
		pts.add(new Point(0.0, 2.76367, 8.56199));
		pts.add(new Point(0.0, 2.16042, 9.48623));
		pts.add(new Point(0.0, 4.21412, 9.21319));
		pts.add(new Point(0.0, 5.62246, 9.61291));
		pts.add(new Point(0.0, 5.66829, 9.9527));
		pts.add(new Point(0.0, 5.65008, 8.57491));
		pts.add(new Point(0.0, 2.5145, 10.9446));
		pts.add(new Point(0.0, 4.2112, 10.1174));
		pts.add(new Point(0.0, 5.85721, 8.62837));
		pts.add(new Point(0.0, 2.10258, 9.88564));
		pts.add(new Point(0.0, 5.76463, 11.0266));
		pts.add(new Point(0.0, 5.98088, 10.5633));
		pts.add(new Point(0.0, 2.58497, 10.2593));
		pts.add(new Point(0.0, 1.88336, 9.5746));
		pts.add(new Point(0.0, 3.86159, 8.93219));
		pts.add(new Point(0.0, 5.65844, 9.89612));
		pts.add(new Point(0.0, 3.83758, 8.89616));
		pts.add(new Point(0.0, 3.56057, 9.11622));
		pts.add(new Point(0.0, 4.00368, 10.9617));
		pts.add(new Point(0.0, 2.12469, 10.8819));
		pts.add(new Point(0.0, 2.15878, 10.5991));
		pts.add(new Point(0.0, 5.83497, 11.0085));
		pts.add(new Point(0.0, 4.50269, 8.67798));
		pts.add(new Point(0.0, 2.8212, 9.73473));
		pts.add(new Point(0.0, 5.80672, 10.0763));
		pts.add(new Point(0.0, 1.78939, 10.9691));
		pts.add(new Point(0.0, 3.77961, 10.1916));
		pts.add(new Point(0.0, 5.0966, 9.33428));
		pts.add(new Point(0.0, 3.18822, 10.4288));
		pts.add(new Point(0.0, 3.49807, 10.671));
		pts.add(new Point(0.0, 4.12436, 9.99308));
		pts.add(new Point(0.0, 5.95329, 8.38519));
		pts.add(new Point(0.0, 5.37624, 10.9978));
		pts.add(new Point(0.0, 1.84545, 8.28723));
		pts.add(new Point(0.0, 2.88835, 9.76432));
		pts.add(new Point(0.0, 3.38926, 8.49082));
		pts.add(new Point(0.0, 5.80607, 9.30605));
		pts.add(new Point(0.0, 3.5914, 10.656));
		pts.add(new Point(0.0, 2.69459, 8.88158));
		pts.add(new Point(0.0, 4.47632, 10.8794));
		pts.add(new Point(0.0, 3.88743, 10.3435));
		pts.add(new Point(0.0, 5.97477, 9.29982));
		pts.add(new Point(0.0, 6.15485, 8.89663));
		pts.add(new Point(0.0, 5.57308, 8.9089));
		pts.add(new Point(0.0, 5.03037, 10.5138));
		pts.add(new Point(0.0, 5.20124, 8.27557));
		pts.add(new Point(0.0, 5.98055, 10.2581));
		pts.add(new Point(0.0, 1.82489, 10.0553));
		pts.add(new Point(0.0, 3.17284, 10.4497));
		pts.add(new Point(0.0, 1.52159, 11.169));
		pts.add(new Point(0.0, 5.62392, 9.31781));
		pts.add(new Point(0.0, 4.02703, 8.93184));
		pts.add(new Point(0.0, 3.32349, 10.8577));
		pts.add(new Point(0.0, 2.62867, 10.635));
		pts.add(new Point(0.0, 4.16346, 9.5587));
		pts.add(new Point(0.0, 2.94163, 8.4038));
		pts.add(new Point(0.0, 1.84049, 9.88052));
		pts.add(new Point(0.0, 1.92315, 8.70463));
		pts.add(new Point(0.0, 1.84033, 9.77887));
		pts.add(new Point(0.0, 3.54089, 9.2277));
		pts.add(new Point(0.0, 2.11444, 9.10212));
		pts.add(new Point(0.0, 3.70622, 10.3874));
		pts.add(new Point(0.0, 5.97672, 9.72921));
		pts.add(new Point(0.0, 3.26112, 10.5868));
		pts.add(new Point(0.0, 2.09849, 8.75802));
		pts.add(new Point(0.0, 4.33417, 10.2357));
		pts.add(new Point(0.0, 5.85766, 8.28375));
		pts.add(new Point(0.0, 3.2359, 10.6197));
		pts.add(new Point(0.0, 1.70877, 10.2371));
		pts.add(new Point(0.0, 2.20885, 11.0715));
		pts.add(new Point(0.0, 1.88143, 8.40566));
		pts.add(new Point(0.0, 5.18782, 10.9543));
		pts.add(new Point(0.0, 3.7735, 9.71105));
		pts.add(new Point(0.0, 4.82788, 10.0385));
		pts.add(new Point(0.0, 4.98225, 9.10614));
		pts.add(new Point(0.0, 4.34536, 8.36176));
		pts.add(new Point(0.0, 4.63089, 10.7739));
		pts.add(new Point(0.0, 5.87126, 8.57092));
		pts.add(new Point(0.0, 4.79851, 9.27592));
		pts.add(new Point(0.0, 5.85956, 10.0619));
		pts.add(new Point(0.0, 3.82823, 11.2324));
		pts.add(new Point(0.0, 2.20385, 9.73411));
		pts.add(new Point(0.0, 1.83931, 11.2104));
		pts.add(new Point(0.0, 5.05693, 8.82679));
		pts.add(new Point(0.0, 3.03377, 9.36178));
		pts.add(new Point(0.0, 4.8424, 10.2933));
		pts.add(new Point(0.0, 4.74906, 8.32168));
		pts.add(new Point(0.0, 4.14462, 10.4527));
		pts.add(new Point(0.0, 5.06123, 9.43165));
		pts.add(new Point(0.0, 4.01396, 10.6513));

		Ellipse e = Utils.minVolEllipse(pts, 0.001);

		assertEquals(3.876, e.mu()[0], 1e-3);
		assertEquals(9.837, e.mu()[1], 1e-3);
		assertEquals(3.166, e.rad()[0], 1e-3);
		assertEquals(2.002, e.rad()[1], 1e-3);
		assertEquals(3.149, Math.abs(e.phi()), 1e-3);
	}
}
